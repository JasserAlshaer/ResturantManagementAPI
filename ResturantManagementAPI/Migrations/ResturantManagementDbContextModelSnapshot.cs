// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResturantManagementAPI.Models.Context;

#nullable disable

namespace ResturantManagementAPI.Migrations
{
    [DbContext(typeof(ResturantManagementDbContext))]
    partial class ResturantManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 2, 25, 20, 36, 58, 782, DateTimeKind.Local).AddTicks(8157));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Carts", null, t =>
                        {
                            t.HasCheckConstraint("CH_Cart_AddingDate", "CreatedDate >= sysdatetime()");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("Qtn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MealId");

                    b.ToTable("CartItems", t =>
                        {
                            t.HasCheckConstraint("_CartItem_Quantity_CH", "Qtn >= 0");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Ingredidiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 2, 25, 20, 36, 58, 785, DateTimeKind.Local).AddTicks(3254));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<float>("PricePerUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.HasIndex("IngredientName")
                        .IsUnique();

                    b.ToTable("Ingredidiantes", t =>
                        {
                            t.HasCheckConstraint("CH_Ingredidiante_Description", "LEN(Description) >= 10 AND LEN(Description) <= 50");

                            t.HasCheckConstraint("CH_Ingredidiante_IngredientName", "LEN(IngredientName) >= 3 AND LEN(IngredientName) <= 20");

                            t.HasCheckConstraint("CH_Ingredidiante_PricePerUnit", "(PricePerUnit) >= 0");

                            t.HasCheckConstraint("CH_Ingredidiante_Quantity", "(Quantity) >= 0");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 2, 25, 20, 36, 58, 784, DateTimeKind.Local).AddTicks(8684));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1m);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Items", null, t =>
                        {
                            t.HasCheckConstraint("CH_Item_Name", "LEN(Quantity) >3 ");

                            t.HasCheckConstraint("CH_Item__Description", "LEN(Description) >0 ");

                            t.HasCheckConstraint("CH_Item__Quantity", "LEN(Quantity) >0 ");

                            t.HasCheckConstraint("CH_Item__price", "LEN(Price) >0 ");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.ItemIngredidiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredidianteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<float>("Qtn")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IngredidianteId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemIngredidiantes", t =>
                        {
                            t.HasCheckConstraint("Qtn_ItemIngredidiante_ch", "Qtn > 1");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<string>("ServingSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals", t =>
                        {
                            t.HasCheckConstraint("CH_Meal_Name", "LEN(Name)>4");

                            t.HasCheckConstraint("CH_Meal_Price", "Price > 0");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.MealItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("Qtn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MealId");

                    b.ToTable("MealItems");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelievryManPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("NetPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 2, 25, 20, 36, 58, 784, DateTimeKind.Local).AddTicks(6057));

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<float>("PromoCode")
                        .HasColumnType("real");

                    b.Property<int>("RecivieingMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id");

                    b.ToTable("Orders", t =>
                        {
                            t.HasCheckConstraint("Ch_Order_DiscountAmount", "DiscountAmount>=0");

                            t.HasCheckConstraint("Ch_Order_NetPrice", "NetPrice>=0");

                            t.HasCheckConstraint("Ch_Order_TaxAmount", "TaxAmount>=0");

                            t.HasCheckConstraint("Ch_Order_TotalPrice", "TotalPrice>=0");

                            t.HasCheckConstraint("Ch_Order_phone", "(len([DelievryManPhone])=(10) AND ([DelievryManPhone] like '079%' OR [DelievryManPhone] like '078%' OR [DelievryManPhone] like '077%'))");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 2, 25, 20, 36, 58, 783, DateTimeKind.Local).AddTicks(869));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Password")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CH_User_Email", "Email Like '%@gmail.com%' Or Email Like  '%@outlook.com%' or Email Like '%@yahoo.com%'");

                            t.HasCheckConstraint("Ch_User_name", "len(Name)>5");

                            t.HasCheckConstraint("Ch_User_password", "LEN(password) >= 8 AND LEN(password) <= 16");

                            t.HasCheckConstraint("Ch_User_phone", "(len([Phone])=(10) AND ([Phone] like '079%' OR [Phone] like '078%' OR [Phone] like '077%'))");
                        });
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Cart", b =>
                {
                    b.HasOne("ResturantManagementAPI.Models.Entites.Order", "Order")
                        .WithOne("Cart")
                        .HasForeignKey("ResturantManagementAPI.Models.Entites.Cart", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResturantManagementAPI.Models.Entites.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.CartItem", b =>
                {
                    b.HasOne("ResturantManagementAPI.Models.Entites.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResturantManagementAPI.Models.Entites.Item", "Item")
                        .WithMany("CartItems")
                        .HasForeignKey("ItemId");

                    b.HasOne("ResturantManagementAPI.Models.Entites.Meal", "Meal")
                        .WithMany("CartItems")
                        .HasForeignKey("MealId");

                    b.Navigation("Cart");

                    b.Navigation("Item");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.ItemIngredidiante", b =>
                {
                    b.HasOne("ResturantManagementAPI.Models.Entites.Ingredidiante", "Ingredidiante")
                        .WithMany("ItemIngredidiantes")
                        .HasForeignKey("IngredidianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResturantManagementAPI.Models.Entites.Item", "Item")
                        .WithMany("ItemIngredidiantes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredidiante");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.MealItem", b =>
                {
                    b.HasOne("ResturantManagementAPI.Models.Entites.Item", "Item")
                        .WithMany("MealItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResturantManagementAPI.Models.Entites.Meal", "Meal")
                        .WithMany("MealItems")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Ingredidiante", b =>
                {
                    b.Navigation("ItemIngredidiantes");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Item", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ItemIngredidiantes");

                    b.Navigation("MealItems");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Meal", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("MealItems");
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.Order", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("ResturantManagementAPI.Models.Entites.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
